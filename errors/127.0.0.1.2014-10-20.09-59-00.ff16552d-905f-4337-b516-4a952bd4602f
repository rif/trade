(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> unsupported operand type(s) for +: 'NoneType' and 'int'"
p3
sS'layer'
p4
S'/home/rif/Downloads/web2py/applications/trade/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\nfrom order_checker import order_checker\n\ndef index():\n    form = SQLFORM(Order)\n    if form.process().accepted:\n        order = Order(form.vars.id)\n        portofolio = db(Portofolio.agent==order.created_by).select().first()\n        check = order_checker(form.vars,\n                         portofolio,\n                         db(PortofolioRule).select())\n        if check[0]:\n            # mark as compliant\n            order.update_record(compliant=True)\n            # update portofolio\n            if not portofolio:\n                Portofolio.insert(agent=order.created_by,\n                                  total = order.amount,\n                                  average = order.amount,\n                                  last_amount = order.amount,\n                                  orders_count = 1\n                )\n            else:\n                portofolio.update_record(\n                    total = portofolio.total + order.amount,\n                    average = (portofolio.total + order.amount) / (portofolio.orders_count + 1),\n                    last_amount = order.amount,\n                    orders_count = portofolio.orders_count + 1\n                )\n            #redirect\n            session.flash = \'order inserted\'\n            redirect(\'good_boy\')\n        else:\n            session.flash = check[1]\n            redirect(\'bad_boy\')\n    return dict(form=form)\n\ndef good_boy():\n    response.view = \'default/redirect.html\'\n    return dict(title=\'Success!\')\n\ndef bad_boy():\n    response.view = \'default/redirect.html\'\n    return dict(title=\'Fail\')\n\ndef rules():\n    grid = SQLFORM.grid(PortofolioRule)\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/rif/Downloads/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/rif/Downloads/web2py/applications/trade/controllers/default.py", line 101, in <module>\n  File "/home/rif/Downloads/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/rif/Downloads/web2py/applications/trade/controllers/default.py", line 28, in index\n    average = (portofolio.total + order.amount) / (portofolio.orders_count + 1),\nTypeError: unsupported operand type(s) for +: \'NoneType\' and \'int\'\n'
p11
s.